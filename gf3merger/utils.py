import os
import numpy as np


def _read_res(slc_dir: str, query_keyword: str) -> str:
    """_READ_RES() is a function to read metadata value from slave.res file that
    is generated by DORIS.

    Parameters
    ----------
    slc_dir : str
        The SLC directory that contains slave.res file. For example, you could have
        `slc_dir = "stack/process/S01B01/20210225"`.
    query_keyword : str
        The keyword to query in slave.res file. Look for keywords in .res files
        that ends with semicolon.

    Returns
    -------
    str
        The content of the keyword. If the keyword is not found, ValueError will
        be raised.
    """
    fmeta = os.path.join(slc_dir, "slave.res")
    with open(fmeta, "r") as f:
        for line in f:
            if query_keyword in line:
                return line.split()[-1]

    raise ValueError(f"Cannot find {query_keyword} in {fmeta}")


def _read_rslc(
    slc_dir: str,
    lines: int | None = None,
    samples: int | None = None
) -> np.ndarray:
    """_READ_RSLC() is a function to read slave_rsmp.raw file generated by DORIS.
    Please note that this reads the COREGISTERED slave image, hence the "r"slc,
    where "r" stands for "resampled".

    Parameters
    ----------
    slc_dir : str
        Sames as _read_res(), The SLC directory that contains slave_rsmp.raw file.
    lines : int | None, optional
        Lines of the slave_rsmp.raw file. By default "slave.res" file in the same
        folder will be searched for getting the lines and samples of this image.
    samples : int | None, optional
        Samples of the salve_rsmp.raw file.

    Returns
    -------
    np.ndarray
        The 2D numpy array of the slave_rsmp.raw file in complext format.
    """


    # get the shape of the image
    if lines is None or samples is None:
        lines = int(_read_res(slc_dir, "Last_line (w.r.t. original_master)"))
        samples = int(_read_res(slc_dir, "Last_pixel (w.r.t. original_master)"))
    shape = (lines, samples * 2)

    # read a binary file with numpy.memmap
    frslc = os.path.join(slc_dir, "slave_rsmp.raw")
    try:
        rslc_int = np.memmap(
            filename=frslc, dtype=np.int16, mode="r", offset=0, shape=shape
        )
    except ValueError as e:
        raise RuntimeError(f"Unable to read image {frslc} with dtype {np.int16}") from e

    # convert to complex64
    rslc = rslc_int[:, 0::2] + 1j * rslc_int[:, 1::2]

    return rslc
