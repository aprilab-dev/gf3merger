import os
import logging
import matplotlib.pyplot as plt
import numpy as np


logger = logging.getLogger("sLogger")

def read_res(slc_dir: str, query_keyword: str) -> str:
    """_READ_RES() is a function to read metadata value from slave.res file that
    is generated by DORIS.

    Parameters
    ----------
    slc_dir : str
        The SLC directory that contains slave.res file. For example, you could have
        `slc_dir = "stack/process/S01B01/20210225"`.
    query_keyword : str
        The keyword to query in slave.res file. Look for keywords in .res files
        that ends with semicolon.

    Returns
    -------
    str
        The content of the keyword. If the keyword is not found, ValueError will
        be raised.
    """
    fmeta = os.path.join(slc_dir, "slave.res")
    with open(fmeta, "r") as f:
        for line in f:
            if query_keyword in line:
                return line.split()[-1]

    raise ValueError(f"Cannot find {query_keyword} in {fmeta}")

def read_rslc(
    slc_dir: str, lines: int | None = None, samples: int | None = None
) -> np.ndarray:
    """_READ_RSLC() is a function to read slave_rsmp.raw file generated by DORIS.
    Please note that this reads the COREGISTERED slave image, hence the "r"slc,
    where "r" stands for "resampled".

    Parameters
    ----------
    slc_dir : str
        Sames as _read_res(), The SLC directory that contains slave_rsmp.raw file.
    lines : int | None, optional
        Lines of the slave_rsmp.raw file. By default "slave.res" file in the same
        folder will be searched for getting the lines and samples of this image.
    samples : int | None, optional
        Samples of the salve_rsmp.raw file.

    Returns
    -------
    np.ndarray
        The 2D numpy array of the slave_rsmp.raw file in complext format.
    """

    # get the shape of the image
    if lines is None or samples is None:
        try:
            linestr = read_res(slc_dir, "Last_line (w.r.t. original_master)")
            samplestr = read_res(slc_dir, "Last_pixel (w.r.t. original_master)")
        except ValueError:
            linestr = read_res(slc_dir, "Last_line (w.r.t. original_image)")
            samplestr = read_res(slc_dir, "Last_pixel (w.r.t. original_image)")
        lines, samples = int(linestr), int(samplestr)

    shape = (lines, samples * 2)

    # read a binary file with numpy.memmap
    frslc = os.path.join(slc_dir, "slave_rsmp.raw")
    if not os.path.exists(frslc):  # mother image uses "image_crop.raw" as its name
        frslc = os.path.join(slc_dir, "image_crop.raw")
    try:
        rslc_int = np.memmap(
            filename=frslc, dtype=np.int16, mode="r", offset=0, shape=shape
        )
    except ValueError as e:
        raise RuntimeError(f"Unable to read image {frslc} with dtype {np.int16}") from e

    # convert to complex64
    rslc = rslc_int[:, 0::2] + 1j * rslc_int[:, 1::2]

    return rslc

def write_rslc(data, fout):

    dout = np.empty(data.size * 2, dtype=np.float64)
    dout[0::2] = data.flatten().real
    dout[1::2] = data.flatten().imag

    # write the data to disk in raw binary format and np.int16 using tofile()
    with open(fout, 'wb') as f:
        dout.astype(np.int16).tofile(f)

def plot_spectrum(slc_arr: np.ndarray, fname: str = "Spectrum.png"):
    mag = np.zeros(slc_arr.shape[0])

    # iterate over rows of the array
    for signal in slc_arr.T:
        # Compute FFT
        spectrum = np.fft.fftshift(np.fft.fft(signal))

        # Compute magnitude spectrum
        magnitude = np.abs(spectrum)

        mag += magnitude

    # Plot magnitude spectrum
    plt.clf()
    plt.plot(mag)
    plt.grid(True)
    plt.ylabel("Magnitude")
    plt.xlabel("Frequency (Hz)")
    plt.savefig(fname)

